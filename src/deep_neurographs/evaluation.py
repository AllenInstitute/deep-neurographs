"""
Created on Sat July 15 9:00:00 2023

@author: Anna Grim
@email: anna.grim@alleninstitute.org

Evaluates performance of edge classifiation model.

"""
import numpy as np

METRICS_LIST = [
    "precision",
    "recall",
    "f1",
    "# splits fixed",
    "# merges created",
]


def run_evaluation(neurographs, blocks, pred_edges):
    """
    Runs an evaluation on the accuracy of the predictions generated by an edge
    classication model.

    Parameters
    ----------
    neurographs : list[NeuroGraph]
        Predicted neurographs.
    blocks : list[str]
        List of block_ids that indicate which predictions to evaluate.
    pred_edges : numpy.ndarray
        Positive edge predictions.

    Returns
    -------
    stats : dict
        Dictionary that stores the accuracy of the edge classification model
        on all edges (i.e. "Overall"), simple edges, and complex edges. The
        metrics contained in this dictionary are identical to "METRICS_LIST"].

    """
    stats = {
        "Overall": dict([(metric, []) for metric in METRICS_LIST]),
        "Simple": dict([(metric, []) for metric in METRICS_LIST]),
        "Complex": dict([(metric, []) for metric in METRICS_LIST]),
    }
    for block_id in blocks:
        # Compute accuracy
        overall_stats_i = get_stats(
            neurographs[block_id],
            neurographs[block_id].mutable_edges,
            pred_edges[block_id],
        )

        simple_stats_i = get_stats(
            neurographs[block_id],
            neurographs[block_id].get_simple_proposals(),
            pred_edges[block_id],
        )

        complex_stats_i = get_stats(
            neurographs[block_id],
            neurographs[block_id].get_complex_proposals(),
            pred_edges[block_id],
        )

        # Store results
        for metric in METRICS_LIST:
            stats["Overall"][metric].append(overall_stats_i[metric])
            stats["Simple"][metric].append(simple_stats_i[metric])
            stats["Complex"][metric].append(complex_stats_i[metric])

    return stats


def get_predictions(idxs, idx_to_edge, y_pred):
    """
    Gets edges that are predicted to be target edges for some "block_id".

    Parameters
    ----------
    idxs : set
        Indices of entries in "y_pred" that belong to a given block.
    idx_to_edge : dict
        Dictionary that stores the correspondence between an index from
        "y_pred" and edge from "neurographs[block_id]" for some "block_id".
    y_pred : numpy.ndarray
        Prediction of edge probabilities generated by classifcation model.

    Returns
    -------
    set
        Edges that are predicted to be target edges for some "block_id".

    """
    edge_idxs = set(np.where(y_pred > 0)[0]).intersection(idxs)
    return set([idx_to_edge[idx] for idx in edge_idxs])


def get_stats(neurograph, proposals, pred_edges):
    """
    Accuracy of the predictions generated by an edge classication model on a
    given block and "edge_type" (e.g. overall, simple, or complex).

    Parameters
    ----------
    neurograph : NeuroGraph
        Predicted neurograph
    proposals : set[frozenset]
        Set of edge proposals for a given "edge_type".
    y_pred : numpy.ndarray
        Binary predictions of edges generated by classifcation model.

    Returns
    -------
    dict
        Dictionary containing results of evaluation where the keys are
        "METRICS_LIST".

    """
    tp, fp, p, r, f1 = get_accuracy(neurograph, proposals, pred_edges)
    stats = {
        "# splits fixed": tp,
        "# merges created": fp,
        "precision": p,
        "recall": r,
        "f1": f1,
    }
    return stats


def get_accuracy(neurograph, proposals, pred_edges):
    """
    Computes the following metrics for a given set of predicted edges:
    (1) true positives, (2) false positive, (3) precision, (4) recall, and
    (5) f1-score.

    Parameters
    ----------
    neurograph : NeuroGraph
        Predicted neurograph
    proposals : set[frozenset]
        Set of edge proposals for a given "edge_type".
    y_pred : numpy.ndarray
        Prediction of edge probabilities generated by classifcation model.

    Returns
    -------
    tp : float
        Number of true positives.
    fp : float
        Number of false positives.
    p : float
        Precision.
    r : float
        Recall.
    f1 : float
        F1-score.

    """
    tp, fp, fn = get_accuracy_counts(neurograph, proposals, pred_edges)
    p = 1 if tp + fp == 0 else tp / (tp + fp)
    r = 1 if tp + fn == 0 else tp / (tp + fn)
    f1 = (2 * r * p) / max(r + p, 1e-3)
    return tp, fp, p, r, f1


def get_accuracy_counts(neurograph, proposals, pred_edges):
    """
    Computes the following values: (1) true positives, (2) false positive, and
    (3) false negatives.

    Parameters
    ----------
    neurograph : NeuroGraph
        Predicted neurograph
    proposals : set[frozenset]
        Set of edge proposals for a given "edge_type".
    y_pred : numpy.ndarray
        Prediction of edge probabilities generated by classifcation model.

    Returns
    -------
    tp : float
        Number of true positives.
    fp : float
        Number of false positives.
    fn : float
        Number of false negatives.

    """
    tp = 0
    fp = 0
    fn = 0
    for edge in proposals:
        if edge in neurograph.target_edges:
            if edge in pred_edges:
                tp += 1
            else:
                fn += 1
        elif edge in pred_edges:
            fp += 1
    return tp, fp, fn
